from openai import OpenAI
from .searchcaster_api import (
    get_username,
    get_casts,
    get_casts_for_user,
)
import json
import sys
import os


class GPT:
    def __init__(self):
        self.client = OpenAI(api_key=os.getenv("CHAT_GPT_API_KEY"))

    def process_searchcaster_output_with_openai(self, query, data):
        """
        Uses OpenAI to process and enhance the output received from Searchcaster.
        """
        json_data = json.dumps(data)
        prompt = f"Answer to question: '{query}' based on following data: {json_data}"

        # Instruct OpenAI to provide a summary or any other processing required
        response = self.client.chat.completions.create(
            model="gpt-4-turbo",  # or the latest available engine
            messages=[
                {"role": "user", "content": prompt},
            ],
            max_tokens=200,  # Adjust as needed
            temperature=0.3,
        )
        return response.choices[0].message.content

    def prepare_query_for_searchcaster(self, user_input):
        """
        Uses OpenAI to turn the user's conversational input into a structured query for Searchcaster.
        """
        # OpenAI prompt to reformat the conversational user input into a search query
        prompt = (
            "Extract one critical keyword from this user input that "
            "are essential for a search query API on a social media platform. Ignore common/general/meaningless terms "
            f"and focus on unique and valuable keywords. Input: '{user_input}'."
        )

        response = self.client.chat.completions.create(
            model="gpt-4",  # or the latest available engine
            messages=[
                {"role": "user", "content": prompt},
            ],
            max_tokens=60,
            temperature=0.3,
        )
        # Extracting the query generated by OpenAI
        return response.choices[0].message.content

    def determine_if_question_is_about_user(self, user_input):
        prompt = f"Extract the username/persona alias from the input: '{user_input}'. If there is no username or persona return 'None'. Take into consideration names from different lanuauges and cultures."

        response = self.client.chat.completions.create(
            model="gpt-4",  # or the latest available engine
            messages=[
                {"role": "user", "content": prompt},
            ],
            max_tokens=5,
            temperature=0.5,
        )
        # Extracting the query generated by OpenAI
        return response.choices[0].message.content


def process_query(user_input):
    gpt = GPT()
    # user_input = input("Ask some question: ")
    # print("=========================================")
    print(f"Question: {user_input}")

    user = gpt.determine_if_question_is_about_user(user_input)

    print(user)

    if user == "None":
        keywords = gpt.prepare_query_for_searchcaster(user_input)
        user_casts = get_casts(keywords)
    else:
        username = get_username(user)
        user_casts = get_casts_for_user(username)

    return gpt.process_searchcaster_output_with_openai(user_input, user_casts)
